# ServiceAccount for Kiali service
apiVersion: v1
kind: ServiceAccount
metadata:
 name: kiali
 namespace: "istio-system"
 # Standard Helm and app labels
 labels:
   helm.sh/chart: kiali-server-2.0.0
   app: kiali
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali
   version: "v2.0.0"
   app.kubernetes.io/version: "v2.0.0"
   app.kubernetes.io/managed-by: Helm
   app.kubernetes.io/part-of: "kiali"

---
# ConfigMap containing Kiali configuration
apiVersion: v1
kind: ConfigMap
metadata:
 name: kiali
 namespace: "istio-system"
 labels:
   helm.sh/chart: kiali-server-2.0.0
   app: kiali
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali
   version: "v2.0.0"
   app.kubernetes.io/version: "v2.0.0"
   app.kubernetes.io/managed-by: Helm
   app.kubernetes.io/part-of: "kiali"
data:
 # Main configuration file for Kiali
 config.yaml: |
   # Display settings for additional details
   additional_display_details:
   - annotation: kiali.io/api-spec
     icon_annotation: kiali.io/api-type
     title: API Documentation
   
   # Authentication configuration
   auth:
     openid: {}
     openshift:
       client_id_prefix: kiali
     strategy: anonymous
   
   # Clustering configuration
   clustering:
     autodetect_secrets:
       enabled: true
       label: kiali.io/multiCluster=true
     clusters: []
   
   # Deployment settings
   deployment:
     additional_service_yaml: {}
     affinity:
       node: {}
       pod: {}
       pod_anti: {}
     cluster_wide_access: true
     configmap_annotations: {}
     custom_envs: []
     custom_secrets: []
     dns:
       config: {}
       policy: ""
     host_aliases: []
     hpa:
       api_version: autoscaling/v2
       spec: {}
     image_digest: ""
     image_name: quay.io/kiali/kiali
     image_pull_policy: IfNotPresent
     image_pull_secrets: []
     image_version: v2.0
     
     # Ingress configuration
     ingress:
       additional_labels: {}
       class_name: nginx
       override_yaml:
         metadata: {}
     ingress_enabled: false
     
     # Basic deployment settings
     instance_name: kiali
     logger:
       log_format: text
       log_level: info
       sampler_rate: "1"
       time_field_format: 2006-01-02T15:04:05Z07:00
     namespace: istio-system
     node_selector: {}
     pod_annotations: {}
     pod_labels:
       sidecar.istio.io/inject: "false"
     priority_class_name: ""
     replicas: 1
     
     # Resource limits
     resources:
       limits:
         memory: 1Gi
       requests:
         cpu: 10m
         memory: 64Mi
     
     secret_name: kiali
     security_context: {}
     service_annotations: {}
     service_type: ""
     tolerations: []
     version_label: v2.0.0
     view_only_mode: false
   
   # External services configuration
   external_services:
     custom_dashboards:
       enabled: true
     istio:
       root_namespace: istio-system
     tracing:
       enabled: false
   
   # Identity settings
   identity:
     cert_file: ""
     private_key_file: ""
   
   istio_namespace: istio-system
   
   # Feature flags
   kiali_feature_flags:
     disabled_features: []
     validations:
       ignore:
       - KIA1301
   
   login_token:
     signing_key: CHANGEME00000000
   
   # Server configuration
   server:
     observability:
       metrics:
         enabled: true
         port: 9090
     port: 20001
     web_root: /kiali

---
# ClusterRole defining Kiali permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
 name: kiali
 labels:
   helm.sh/chart: kiali-server-2.0.0
   app: kiali
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali
   version: "v2.0.0"
   app.kubernetes.io/version: "v2.0.0"
   app.kubernetes.io/managed-by: Helm
   app.kubernetes.io/part-of: "kiali"
# Permission rules
rules:
# Core API permissions
- apiGroups: [""]
 resources:
 - configmaps
 - endpoints
 - pods/log
 verbs:
 - get
 - list
 - watch
- apiGroups: [""]
 resources:
 - namespaces
 - pods
 - replicationcontrollers
 - services
 verbs:
 - get
 - list
 - watch
 - patch
- apiGroups: [""]
 resources:
 - pods/portforward
 verbs:
 - create
 - post
# Apps API permissions
- apiGroups: ["extensions", "apps"]
 resources:
 - daemonsets
 - deployments
 - replicasets
 - statefulsets
 verbs:
 - get
 - list
 - watch
 - patch
# Batch API permissions
- apiGroups: ["batch"]
 resources:
 - cronjobs
 - jobs
 verbs:
 - get
 - list
 - watch
 - patch
# Istio API permissions
- apiGroups:
 - networking.istio.io
 - security.istio.io
 - extensions.istio.io
 - telemetry.istio.io
 - gateway.networking.k8s.io
 resources: ["*"]
 verbs:
 - get
 - list
 - watch
 - create
 - delete
 - patch
# OpenShift specific permissions
- apiGroups: ["apps.openshift.io"]
 resources:
 - deploymentconfigs
 verbs:
 - get
 - list
 - watch
 - patch
- apiGroups: ["project.openshift.io"]
 resources:
 - projects
 verbs:
 - get
- apiGroups: ["route.openshift.io"]
 resources:
 - routes
 verbs:
 - get
# Authentication permissions
- apiGroups: ["authentication.k8s.io"]
 resources:
 - tokenreviews
 verbs:
 - create
- apiGroups: ["oauth.openshift.io"]
 resources:
 - oauthclients
 resourceNames:
 - kiali-istio-system
 verbs:
 - get
- apiGroups: ["admissionregistration.k8s.io"]
 resources:
 - mutatingwebhookconfigurations
 verbs:
 - get
 - list
 - watch

---
# ClusterRoleBinding for Kiali
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: kiali
 labels:
   helm.sh/chart: kiali-server-2.0.0
   app: kiali
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali
   version: "v2.0.0"
   app.kubernetes.io/version: "v2.0.0"
   app.kubernetes.io/managed-by: Helm
   app.kubernetes.io/part-of: "kiali"
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: kiali
subjects:
- kind: ServiceAccount
 name: kiali
 namespace: "istio-system"

---
# Service exposing Kiali
apiVersion: v1
kind: Service
metadata:
 name: kiali
 namespace: "istio-system"
 labels:
   helm.sh/chart: kiali-server-2.0.0
   app: kiali
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali
   version: "v2.0.0"
   app.kubernetes.io/version: "v2.0.0"
   app.kubernetes.io/managed-by: Helm
   app.kubernetes.io/part-of: "kiali"
 annotations:
spec:
 # Service type and ports
 type: ClusterIP
 ports:
 - name: http
   appProtocol: http
   protocol: TCP
   port: 20001
 - name: http-metrics
   appProtocol: http
   protocol: TCP
   port: 9090
 selector:
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali

---
# Deployment for Kiali
apiVersion: apps/v1
kind: Deployment
metadata:
 name: kiali
 namespace: "istio-system"
 labels:
   helm.sh/chart: kiali-server-2.0.0
   app: kiali
   app.kubernetes.io/name: kiali
   app.kubernetes.io/instance: kiali
   version: "v2.0.0"
   app.kubernetes.io/version: "v2.0.0"
   app.kubernetes.io/managed-by: Helm
   app.kubernetes.io/part-of: "kiali"
spec:
 # Number of replicas
 replicas: 1
 selector:
   matchLabels:
     app.kubernetes.io/name: kiali
     app.kubernetes.io/instance: kiali
 # Update strategy
 strategy:
   rollingUpdate:
     maxSurge: 1
     maxUnavailable: 1
   type: RollingUpdate
 template:
   metadata:
     name: kiali
     labels:
       helm.sh/chart: kiali-server-2.0.0
       app: kiali
       app.kubernetes.io/name: kiali
       app.kubernetes.io/instance: kiali
       version: "v2.0.0"
       app.kubernetes.io/version: "v2.0.0"
       app.kubernetes.io/managed-by: Helm
       app.kubernetes.io/part-of: "kiali"
       # Disable Istio sidecar injection
       sidecar.istio.io/inject: "false"
     annotations:
       checksum/config: 03a677accc379d7d5b7b3c74464dc72867b31f794e5beaa98221ba19c5735016
       prometheus.io/scrape: "true"
       prometheus.io/port: "9090"
       kiali.io/dashboards: go,kiali
   spec:
     serviceAccountName: kiali
     containers:
     - image: "quay.io/kiali/kiali:v2.0"
       imagePullPolicy: IfNotPresent
       name: kiali
       command:
       - "/opt/kiali/kiali"
       - "-config"
       - "/kiali-configuration/config.yaml"
       # Security context settings
       securityContext:
         allowPrivilegeEscalation: false
         privileged: false
         readOnlyRootFilesystem: true
         runAsNonRoot: true
         capabilities:
           drop:
           - ALL
       # Container ports
       ports:
       - name: api-port
         containerPort: 20001
       - name: http-metrics
         containerPort: 9090
       # Health probes
       readinessProbe:
         httpGet:
           path: /kiali/healthz
           port: api-port
           scheme: HTTP
         initialDelaySeconds: 5
         periodSeconds: 30
       livenessProbe:
         httpGet:
           path: /kiali/healthz
           port: api-port
           scheme: HTTP
         initialDelaySeconds: 5
         periodSeconds: 30
       # Environment variables
       env:
       - name: ACTIVE_NAMESPACE
         valueFrom:
           fieldRef:
             fieldPath: metadata.namespace
       - name: LOG_LEVEL
         value: "info"
       - name: LOG_FORMAT
         value: "text"
       - name: LOG_TIME_FIELD_FORMAT
         value: "2006-01-02T15:04:05Z07:00"
       - name: LOG_SAMPLER_RATE
         value: "1"
       # Volume mounts
       volumeMounts:
       - name: kiali-configuration
         mountPath: "/kiali-configuration"
       - name: kiali-cert
         mountPath: "/kiali-cert"
       - name: kiali-secret
         mountPath: "/kiali-secret"
       - name: kiali-cabundle
         mountPath: "/kiali-cabundle"
       # Resource limits and requests
       resources:
         limits:
           memory: 1Gi
         requests:
           cpu: 10m
           memory: 64Mi
     # Volume definitions
     volumes:
     - name: kiali-configuration
       configMap:
         name: kiali
     - name: kiali-cert
       secret:
         secretName: istio.kiali-service-account
         optional: true
     - name: kiali-secret
       secret:
         secretName: kiali
         optional: true
     - name: kiali-cabundle
       configMap:
         name: kiali-cabundle
         optional: true
